/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        // Simply return if the input is {} or {1}
        if (head==null || head.next==null) return head;

        ListNode lastOdd = head;    // the last-odd node
        ListNode cur = head.next;   // starts with 2nd(even) node

        while (cur!=null && cur.next!=null){
            ListNode odd = cur.next;    // record the odd node
            cur.next = cur.next.next;   // rebind the even nodes
            
            // add the odd node after the last-odd node
            // and update the last-odd node
            odd.next = lastOdd.next;
            lastOdd.next = odd;
            lastOdd = odd;

            // update cur to the next even node
            cur = cur.next;
        }
        return head;
    }
}
